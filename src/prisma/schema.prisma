generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(cuid())
  email String @unique

  name     String?
  birthday String?

  OTP               String?
  referralCode      String? @unique
  MFAMethod         String?
  isMFA             Boolean @default(false)
  isAdmin           Boolean @default(false)
  isBanned          Boolean @default(false)
  isEmailSubscribed Boolean @default(false)

  cart Cart?

  orders        Order[]
  addresses     Address[]
  payments      Payment[]
  wishlist      ProductVariant[] @relation("Wishlist")
  notifications Notification[]
  reviews       Review[]
  errors        Error[]
  files         File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id          String @id @default(cuid())
  title       String @unique
  description String
  logo        String

  products Product[]
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  images      String[]
  tags        String[]

  brand   Brand?  @relation(fields: [brandId], references: [id])
  brandId String?

  categories Category[]
  variants   ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  images      String[]
  stock       Int
  reserved    Int

  reviews   Review[]
  discounts Discount[]
  orders    Order[]
  carts     Cart[]
  wishlists User[]     @relation("Wishlist")

  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(cuid())
  name String @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String         @id @default(cuid())
  text      String
  rating    Int
  product   ProductVariant @relation(fields: [productId], references: [id])
  productId String
  user      User           @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String           @id @default(cuid())
  status      String
  totalAmount Float
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  items       ProductVariant[]

  refund Refund?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id     String           @id @default(cuid())
  user   User             @relation(fields: [userId], references: [id])
  userId String           @unique
  items  ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id         String @id @default(cuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  user       User   @relation(fields: [userId], references: [id])
  userId     String

  createdAt DateTime @default(now())
}

model Notification {
  id      String  @id @default(cuid())
  content String
  read    Boolean @default(false)
  user    User    @relation(fields: [userId], references: [id])
  userId  String

  createdAt DateTime @default(now())
}

model Discount {
  id          String           @id @default(cuid())
  code        String           @unique
  description String
  percent     Int
  startDate   DateTime
  endDate     DateTime
  products    ProductVariant[]

  createdAt DateTime @default(now())
}

model Refund {
  id      String @id @default(cuid())
  amount  Float
  reason  String
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id String @id @default(cuid())

  payableAmount Float

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Error {
  id String @id @default(cuid())

  error String

  createdAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model File {
  id String @id @default(cuid())

  url String

  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
