generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(cuid())
  email String  @unique
  phone String? @unique

  name         String?
  birthday     String?
  OTP          String?
  referralCode String? @unique

  isAuthor          Boolean @default(false)
  isVendor          Boolean @default(false)
  isAdmin           Boolean @default(false)
  isBanned          Boolean @default(false)
  isEmailVerified   Boolean @default(false)
  isPhoneVerified   Boolean @default(false)
  isEmailSubscribed Boolean @default(false)
  isPhoneSubscribed Boolean @default(false)

  vendor   Vendor?
  cart     Cart?
  wishlist Wishlist?

  orders         Order[]
  addresses      Address[]
  payments       Payment[]
  notifications  Notification[]
  productReviews ProductReview[]
  errors         Error[]
  files          File[]
  blogPost       BlogPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vendor {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  Order          Order[]
  vendorVariants VendorVariant[]

  title       String  @unique
  description String?
  logo        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id          String  @id @default(cuid())
  title       String  @unique
  description String?
  logo        String?

  products Product[]
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  images      String[]
  tags        String[]
  metadata    Json?

  wishlists      Wishlist[]
  productReviews ProductReview[]

  brand   Brand  @relation(fields: [brandId], references: [id])
  brandId String

  categories Category[]
  variants   ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id          String   @id @default(cuid())
  title       String
  description String
  images      String[]
  metadata    Json?

  vendorVariants VendorVariant[]
  discounts      Discount[]

  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VendorVariant {
  id    String @id @default(cuid())
  price Float
  stock Int
  isAvailable Boolean @default(true)

  orders    Order[]
  cartItems CartItem[]

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId String

  vendor   Vendor @relation(fields: [vendorId], references: [userId])
  vendorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productVariantId, vendorId], name: "UniqueVendorVariant")
}

model Category {
  id          String  @id @default(cuid())
  title       String  @unique
  description String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductReview {
  id     String @id @default(cuid())
  text   String
  rating Int

  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId], name: "UniqueProductProductReview")
}

model Order {
  id               String  @id @default(cuid())
  status           String
  payableAmount    Float
  discountedAmount Float
  isCompleted      Boolean @default(false)

  items     VendorVariant[]
  refund    Refund?
  address   Address?        @relation(fields: [addressId], references: [id])
  addressId String?

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  vendor   Vendor @relation(fields: [vendorId], references: [id])
  vendorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  user   User      @relation(fields: [userId], references: [id])
  userId String    @id
  items  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  user   User       @relation(fields: [userId], references: [id])
  userId String     @id
  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  cart            Cart          @relation(fields: [cartId], references: [userId])
  cartId          String
  vendorVariant   VendorVariant @relation(fields: [vendorVariantId], references: [id])
  vendorVariantId String
  count           Int

  @@unique([cartId, vendorVariantId], name: "UniqueCartItem")
}

model Address {
  id         String @id @default(cuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String

  user   User    @relation(fields: [userId], references: [id])
  userId String
  orders Order[]

  createdAt DateTime @default(now())
}

model Notification {
  id      String  @id @default(cuid())
  content String
  read    Boolean @default(false)
  user    User    @relation(fields: [userId], references: [id])
  userId  String

  createdAt DateTime @default(now())
}

model Discount {
  id          String   @id @default(cuid())
  code        String   @unique
  description String?
  percent     Int
  startDate   DateTime
  endDate     DateTime

  products ProductVariant[]

  createdAt DateTime @default(now())
}

model Refund {
  id      String @id @default(cuid())
  amount  Float
  reason  String
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id String @id @default(cuid())

  payableAmount Float

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Error {
  id String @id @default(cuid())

  error String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
}

model File {
  id String @id @default(cuid())

  url String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
}

model BlogPost {
  slug        String  @id
  title       String
  image       String
  description String
  content     String? @db.Text

  categories String[]
  tags       String[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
